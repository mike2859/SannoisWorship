@inject IUserManagementService RoleService
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">SannoisWorship.Web</a>
    </div>

</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="nav flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Accueil
            </NavLink>
        </div>

        @if (IsInRole("Admin"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-user" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Créer un utilisateur
                </NavLink>
            </div>
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="users" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Liste des utilisateurs
                </NavLink>
            </div>
        }

        @if (IsInRole("Musicien") || IsInRole("Admin"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="chants" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Chants
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-chant" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Créer un chant
                </NavLink>
            </div>

            <div class="nav-item px-3">
                <NavLink class="nav-link" href="create-partition" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Créer une partition 
                </NavLink>
            </div>
        }
        @if (IsInRole("Chantre"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Chantre
                </NavLink>
            </div>
        }

        @if (IsInRole("Compositeur"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Compositeur
                </NavLink>
            </div>
        }
          <div class="nav-item px-3">
            <NavLink class="nav-link" href="counter">
                <span class="bi bi-plus-square-fill-nav-menu" aria-hidden="true"></span> Counter
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="weather">
                <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Weather
            </NavLink>
        </div>
    </nav>
</div>


@code {
    private List<string> userRoles = new();
    private bool isAuthenticated;
    private string userLogin = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        if (isAuthenticated)
            userLogin = authState.User.Identity?.Name ?? string.Empty;

        userRoles = RoleService.GetUserRoles().ToList();
    }

    private bool IsInRole(string role)
    {
        return userRoles.Contains(role);
    }
}